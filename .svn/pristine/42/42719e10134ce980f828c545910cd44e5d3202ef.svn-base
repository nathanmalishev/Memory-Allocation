//code will be in here
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "queue.h"
#include "first.h"
#include "math.h"
#include "best.h"
#include "worst.h"
#include "next.h"
#include "mem_node.h"

void process_queue(struct processes *process, struct memory_list_info *info_node ,char *algorithm)
{
	struct memory_lists *memory_spot= NULL, *last_mem = NULL;
	struct memory_lists *tmp;
	struct processes *next , *tmp_proc;
	//Process each proccess in the list
	while( process )
	{	
		next = process->next;
		//can we find a spot for the process in memory?
		//memory_list_testing(info_node,1);
		while( !memory_spot )
		{
			if (strcmp( algorithm, "first") == 0)
			{		
				memory_spot = find_first(info_node, process);
			} 
			else if (strcmp( algorithm, "best") == 0)
			{
				memory_spot = find_best(info_node, process);
			}
			else if (strcmp( algorithm, "worst") == 0)
			{
				memory_spot = find_worst(info_node, process);
			}
			else if (strcmp( algorithm, "next") == 0)
			{
				
				if(last_mem)
				{
					last_mem = last_mem->prev;
				}

				memory_spot = find_next(info_node, process, last_mem);
				if(memory_spot)
				{	
					last_mem = memory_spot->next;
					// if(last_mem)
					// {
					// 	printf("last mem\n");
					// 	printf("start %d\n", last_mem->start);
					// 	printf("size %d\n", last_mem->size);
					// }
				}
				
				//because memory_spot will be off in the used list
			}
			else{
				perror("algorithm not defined please enter best/first/worst/next");
				exit(1);
			}
			
			if(memory_spot){break;} //break on first iteration

			//ok nothing was found dame
			//time to take matters into our own hands and remove stuff
			
			//remove function
			tmp = remove_memory_node(info_node, process);
			
			//printf("removing node\n");
			//memory_list_testing(info_node,1);
			
			if(!tmp)
			{
				perror("error queue.c line 52");
				exit(1);
			}
			
			//join function
			free_memory_node(info_node, tmp);
			////memory_list_testing(info_node,1);
			//printf("freeing node\n");
			//memory_list_testing(info_node,1);

			
		}
		// //printf("\t--Memory found --\n");
		// //printf("\t pid %p\n", memory_spot->pid);
		// //printf("\t size %d\n", memory_spot->size);
		// //printf("\t start %d\n", memory_spot->start);
		////memory_list_testing(info_node,1);
		////printf("Process to add \n");
		////printf("\tpid %d\n", process->pid);
		////printf("\tsize %d\n", process->size);
		
		//okay great we have a bit of memory lets use it!
		//////memory_list_testing(info_node,1);
		split_memory_node(info_node, memory_spot, process->size);
		//printf("splitting mem\n");
		//memory_list_testing(info_node,1);
		////memory_list_testing(info_node,1);
		//////memory_list_testing(info_node,1);
		//okay node is split up now lets add it to use it!
		////printf("memory to use\n");
		////printf("\t pid %p\n", memory_spot);
		////printf("\t start %d\n",memory_spot->start );
		////printf("\t size %d\n", memory_spot->size);
		use_memory_node(info_node, memory_spot, process);
		//printf("using mem node\n");
		//memory_list_testing(info_node,1);

		
		printf("%d loaded, numprocesses=%d, numholes=%d, memusage=%.f%%\n",
		process->pid, info_node->num_processes, info_node->holes,
		round(((info_node->mem_usage*1.0 / info_node->mem) * 100)+0.49) );

		// printf("size of process %d - size of mem %d\n", 
		// 	 process->size, memory_spot->size);
		////memory_list_testing(info_node,1);

		// printf("process\n");
		// printf("process id %p\n", process);
		// printf("next id : %p\n", next);

		//send in next process
		process = next;
		//reset memory spot
		memory_spot = NULL;
	}
}

