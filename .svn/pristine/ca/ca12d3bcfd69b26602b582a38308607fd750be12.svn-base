#include <stdio.h>	
#include <stdlib.h>
#include <string.h>
#include <unistd.h>


#include "memswap.h"
#include "mem_node.h"
#include "utilities.h"
#include "queue.h"


#define ARGUMENT_NAME_SIZE 50
#define MAX_INPUT_LINE_SIZE 10



int main(int argc, char **argv)
{
	char input;
	char *file_name, *algorithm_name;
	int memory_size;

	file_name      = (char *)salloc(sizeof(char)*ARGUMENT_NAME_SIZE);
	algorithm_name = (char *)salloc(sizeof(char)*ARGUMENT_NAME_SIZE);
	// get values for each option
	while((input   = getopt(argc, argv, "f:m:a:")) != EOF)
	{
		switch(input)
		{
			case 'f':
				if (GETOPT_TESTING){printf("file option: %s\n", optarg);}
				file_name = optarg;
				continue;
			case 'm':
				if(GETOPT_TESTING) {printf("memory option: %s\n", optarg);}
				memory_size = atoi(optarg);
				continue;
			case 'a':
				if(GETOPT_TESTING) {printf("algorithm option: %s\n", optarg);}
				algorithm_name = optarg;
				continue;
			default:
				if(GETOPT_TESTING) {printf("no registered \n");}
		}
	}


	//read in data here and create process queue
	struct processes *processes_queue;
	processes_queue = create_process_list(file_name);

	// while(processes_queue)
	// {
	// 	printf("new node ---\n");
	// 	printf("\ta: %p\n", processes_queue);
	// 	printf("\tpid %d\n", processes_queue->pid);
	// 	printf("\tsize %d\n", processes_queue->size);
		
	// 	printf("\tnext: %p\n", processes_queue->next);
	// 	processes_queue = processes_queue->next;
	// }
	

	//create initial memory list
	
	struct memory_list_info *mem_info_node = create_memory_list( memory_size );

	//testing delete later
	//memory_list_testing(mem_info_node, CREATE_MEMORY_LIST_TESTING);


	//process the processes
	process_queue(  processes_queue , mem_info_node , algorithm_name );
	
	//testing zone

	// struct memory_lists *memory2;
	// struct processes *a;
	// a = (struct processes *)salloc(sizeof(struct processes));
	// memory2 = (struct memory_lists *)salloc(sizeof(struct memory_lists));
	// a->size = 20;
	// a->pid = 1;
	// a->count = 0;

	// //memory_list_testing( mem_info_node , 1);
	// memory2 = find_first(mem_info_node, a);
	// memory2 = split_memory_node(mem_info_node , memory2 , a->size);
	// memory_list_testing( mem_info_node , 1);
	// // printf("\t -- using memory\n");
	// use_memory_node(mem_info_node , memory2, a);
	// memory_list_testing( mem_info_node , 1);

	// //add another process
	// struct processes *b;
	// struct memory_lists *memory3 = find_first(mem_info_node, b);
	// b = (struct processes *)salloc(sizeof(struct processes));
	// b->size = 100;
	// b->pid = 2;
	// b->count=0;
	// memory3 = split_memory_node(mem_info_node, memory3, b->size);
	// memory_list_testing( mem_info_node , 1);

	// use_memory_node(mem_info_node, memory3, b);
	// memory_list_testing( mem_info_node , 1);

	// memory2 = find_first(mem_info_node, a);
	// printf("\t\t%p\n", memory2);
	// memory2 = split_memory_node(mem_info_node , memory2 , a->size);
	// memory_list_testing( mem_info_node , 1);
	// printf("\t -- using memory\n");
	// use_memory_node(mem_info_node , memory2, a);
	// memory_list_testing( mem_info_node , 1);


	// memory2 = remove_memory_node(mem_info_node);
	// memory_list_testing( mem_info_node , 1);

	// free_memory_node(mem_info_node, memory2);
	// memory_list_testing( mem_info_node , 1);

	// memory2 = remove_memory_node(mem_info_node);
	// memory_list_testing( mem_info_node , 1);

	// free_memory_node(mem_info_node, memory2);
	// memory_list_testing( mem_info_node , 1);

	// memory2 = remove_memory_node(mem_info_node);
	// memory_list_testing( mem_info_node , 1);

	// free_memory_node(mem_info_node, memory2);
	// memory_list_testing( mem_info_node , 1);

	return 0;
}



//Creates the initial queue of processes
struct processes * create_process_list(char *file_name)
{
	struct processes *first_node;
	first_node = (struct processes *)salloc(sizeof(struct processes));
	initialize_process( first_node );
	int read_count=0;
	//read in file here
	char *line;
	line = (char *)salloc(sizeof(char) * MAX_INPUT_LINE_SIZE);
	
	FILE *fp;
	fp = fopen(file_name, "r");
	if( fp == NULL )
	{
		perror("Error opening file");
		exit(1);
	}

	while( fgets(line,MAX_INPUT_LINE_SIZE, fp) != NULL)
	{
		struct processes *prev_node_add;
		if(read_count == 0 )
		{
			//first item in process queue
			first_node->pid  = atoi(line);
			first_node->size = atoi(line+1);
			prev_node_add    = first_node;
			read_count++;
		}
		else
		{
			//not the first node
			struct processes *new_node;
			new_node  = (struct processes *)salloc(sizeof(struct processes));
			initialize_process( new_node );

			new_node->pid       = atoi(line);
			//hackish way to read in values just easy for me lol
			if(new_node->pid >= 10 )
			{
				new_node->size      = atoi(line+2);
			}
			else
			{
				new_node->size      = atoi(line+1);
			}
			
			prev_node_add->next = new_node;
			prev_node_add       = new_node;
		}

	} 


	fclose(fp);
	return first_node; 	
}


